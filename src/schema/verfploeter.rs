// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<Empty>(
                    "Empty",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Empty {
        static mut instance: ::protobuf::lazy::Lazy<Empty> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Empty,
        };
        unsafe {
            instance.get(Empty::new)
        }
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ack {
    // message fields
    pub task_id: u32,
    pub success: bool,
    pub error_message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Ack {
    pub fn new() -> Ack {
        ::std::default::Default::default()
    }

    // uint32 task_id = 1;

    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    pub fn get_task_id(&self) -> u32 {
        self.task_id
    }

    // bool success = 2;

    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }

    pub fn get_success(&self) -> bool {
        self.success
    }

    // string error_message = 3;

    pub fn clear_error_message(&mut self) {
        self.error_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        &mut self.error_message
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_message, ::std::string::String::new())
    }

    pub fn get_error_message(&self) -> &str {
        &self.error_message
    }
}

impl ::protobuf::Message for Ack {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.task_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success != false {
            my_size += 2;
        }
        if !self.error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_uint32(1, self.task_id)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        if !self.error_message.is_empty() {
            os.write_string(3, &self.error_message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ack {
        Ack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "task_id",
                    |m: &Ack| { &m.task_id },
                    |m: &mut Ack| { &mut m.task_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &Ack| { &m.success },
                    |m: &mut Ack| { &mut m.success },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error_message",
                    |m: &Ack| { &m.error_message },
                    |m: &mut Ack| { &mut m.error_message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ack>(
                    "Ack",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ack {
        static mut instance: ::protobuf::lazy::Lazy<Ack> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ack,
        };
        unsafe {
            instance.get(Ack::new)
        }
    }
}

impl ::protobuf::Clear for Ack {
    fn clear(&mut self) {
        self.clear_task_id();
        self.clear_success();
        self.clear_error_message();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ack {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaskId {
    // message fields
    pub task_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TaskId {
    pub fn new() -> TaskId {
        ::std::default::Default::default()
    }

    // uint32 task_id = 1;

    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    pub fn get_task_id(&self) -> u32 {
        self.task_id
    }
}

impl ::protobuf::Message for TaskId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.task_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_uint32(1, self.task_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaskId {
        TaskId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "task_id",
                    |m: &TaskId| { &m.task_id },
                    |m: &mut TaskId| { &mut m.task_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaskId>(
                    "TaskId",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaskId {
        static mut instance: ::protobuf::lazy::Lazy<TaskId> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaskId,
        };
        unsafe {
            instance.get(TaskId::new)
        }
    }
}

impl ::protobuf::Clear for TaskId {
    fn clear(&mut self) {
        self.clear_task_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaskId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskId {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScheduleTask {
    // message fields
    pub client: ::protobuf::SingularPtrField<Client>,
    // message oneof groups
    pub data: ::std::option::Option<ScheduleTask_oneof_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum ScheduleTask_oneof_data {
    ping(Ping),
}

impl ScheduleTask {
    pub fn new() -> ScheduleTask {
        ::std::default::Default::default()
    }

    // .Client client = 1;

    pub fn clear_client(&mut self) {
        self.client.clear();
    }

    pub fn has_client(&self) -> bool {
        self.client.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client(&mut self, v: Client) {
        self.client = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client(&mut self) -> &mut Client {
        if self.client.is_none() {
            self.client.set_default();
        }
        self.client.as_mut().unwrap()
    }

    // Take field
    pub fn take_client(&mut self) -> Client {
        self.client.take().unwrap_or_else(|| Client::new())
    }

    pub fn get_client(&self) -> &Client {
        self.client.as_ref().unwrap_or_else(|| Client::default_instance())
    }

    // .Ping ping = 2;

    pub fn clear_ping(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_ping(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(ScheduleTask_oneof_data::ping(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ping(&mut self, v: Ping) {
        self.data = ::std::option::Option::Some(ScheduleTask_oneof_data::ping(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ping(&mut self) -> &mut Ping {
        if let ::std::option::Option::Some(ScheduleTask_oneof_data::ping(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(ScheduleTask_oneof_data::ping(Ping::new()));
        }
        match self.data {
            ::std::option::Option::Some(ScheduleTask_oneof_data::ping(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ping(&mut self) -> Ping {
        if self.has_ping() {
            match self.data.take() {
                ::std::option::Option::Some(ScheduleTask_oneof_data::ping(v)) => v,
                _ => panic!(),
            }
        } else {
            Ping::new()
        }
    }

    pub fn get_ping(&self) -> &Ping {
        match self.data {
            ::std::option::Option::Some(ScheduleTask_oneof_data::ping(ref v)) => v,
            _ => Ping::default_instance(),
        }
    }
}

impl ::protobuf::Message for ScheduleTask {
    fn is_initialized(&self) -> bool {
        for v in &self.client {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(ScheduleTask_oneof_data::ping(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(ScheduleTask_oneof_data::ping(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.client.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &ScheduleTask_oneof_data::ping(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.client.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &ScheduleTask_oneof_data::ping(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScheduleTask {
        ScheduleTask::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Client>>(
                    "client",
                    |m: &ScheduleTask| { &m.client },
                    |m: &mut ScheduleTask| { &mut m.client },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Ping>(
                    "ping",
                    ScheduleTask::has_ping,
                    ScheduleTask::get_ping,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ScheduleTask>(
                    "ScheduleTask",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ScheduleTask {
        static mut instance: ::protobuf::lazy::Lazy<ScheduleTask> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ScheduleTask,
        };
        unsafe {
            instance.get(ScheduleTask::new)
        }
    }
}

impl ::protobuf::Clear for ScheduleTask {
    fn clear(&mut self) {
        self.clear_client();
        self.clear_ping();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScheduleTask {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScheduleTask {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientList {
    // message fields
    pub clients: ::protobuf::RepeatedField<Client>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ClientList {
    pub fn new() -> ClientList {
        ::std::default::Default::default()
    }

    // repeated .Client clients = 1;

    pub fn clear_clients(&mut self) {
        self.clients.clear();
    }

    // Param is passed by value, moved
    pub fn set_clients(&mut self, v: ::protobuf::RepeatedField<Client>) {
        self.clients = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clients(&mut self) -> &mut ::protobuf::RepeatedField<Client> {
        &mut self.clients
    }

    // Take field
    pub fn take_clients(&mut self) -> ::protobuf::RepeatedField<Client> {
        ::std::mem::replace(&mut self.clients, ::protobuf::RepeatedField::new())
    }

    pub fn get_clients(&self) -> &[Client] {
        &self.clients
    }
}

impl ::protobuf::Message for ClientList {
    fn is_initialized(&self) -> bool {
        for v in &self.clients {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.clients)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.clients {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.clients {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientList {
        ClientList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Client>>(
                    "clients",
                    |m: &ClientList| { &m.clients },
                    |m: &mut ClientList| { &mut m.clients },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientList>(
                    "ClientList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientList {
        static mut instance: ::protobuf::lazy::Lazy<ClientList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientList,
        };
        unsafe {
            instance.get(ClientList::new)
        }
    }
}

impl ::protobuf::Clear for ClientList {
    fn clear(&mut self) {
        self.clear_clients();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Client {
    // message fields
    pub index: u32,
    pub metadata: ::protobuf::SingularPtrField<Metadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Client {
    pub fn new() -> Client {
        ::std::default::Default::default()
    }

    // uint32 index = 1;

    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    pub fn get_index(&self) -> u32 {
        self.index
    }

    // .Metadata metadata = 2;

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> Metadata {
        self.metadata.take().unwrap_or_else(|| Metadata::new())
    }

    pub fn get_metadata(&self) -> &Metadata {
        self.metadata.as_ref().unwrap_or_else(|| Metadata::default_instance())
    }
}

impl ::protobuf::Message for Client {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Client {
        Client::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &Client| { &m.index },
                    |m: &mut Client| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Metadata>>(
                    "metadata",
                    |m: &Client| { &m.metadata },
                    |m: &mut Client| { &mut m.metadata },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Client>(
                    "Client",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Client {
        static mut instance: ::protobuf::lazy::Lazy<Client> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Client,
        };
        unsafe {
            instance.get(Client::new)
        }
    }
}

impl ::protobuf::Clear for Client {
    fn clear(&mut self) {
        self.clear_index();
        self.clear_metadata();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Client {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Client {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Task {
    // message fields
    pub task_id: u32,
    // message oneof groups
    pub data: ::std::option::Option<Task_oneof_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Task_oneof_data {
    ping(Ping),
    empty(Empty),
}

impl Task {
    pub fn new() -> Task {
        ::std::default::Default::default()
    }

    // uint32 task_id = 1;

    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    pub fn get_task_id(&self) -> u32 {
        self.task_id
    }

    // .Ping ping = 2;

    pub fn clear_ping(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_ping(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Task_oneof_data::ping(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ping(&mut self, v: Ping) {
        self.data = ::std::option::Option::Some(Task_oneof_data::ping(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ping(&mut self) -> &mut Ping {
        if let ::std::option::Option::Some(Task_oneof_data::ping(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Task_oneof_data::ping(Ping::new()));
        }
        match self.data {
            ::std::option::Option::Some(Task_oneof_data::ping(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ping(&mut self) -> Ping {
        if self.has_ping() {
            match self.data.take() {
                ::std::option::Option::Some(Task_oneof_data::ping(v)) => v,
                _ => panic!(),
            }
        } else {
            Ping::new()
        }
    }

    pub fn get_ping(&self) -> &Ping {
        match self.data {
            ::std::option::Option::Some(Task_oneof_data::ping(ref v)) => v,
            _ => Ping::default_instance(),
        }
    }

    // .Empty empty = 3;

    pub fn clear_empty(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_empty(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Task_oneof_data::empty(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_empty(&mut self, v: Empty) {
        self.data = ::std::option::Option::Some(Task_oneof_data::empty(v))
    }

    // Mutable pointer to the field.
    pub fn mut_empty(&mut self) -> &mut Empty {
        if let ::std::option::Option::Some(Task_oneof_data::empty(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Task_oneof_data::empty(Empty::new()));
        }
        match self.data {
            ::std::option::Option::Some(Task_oneof_data::empty(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_empty(&mut self) -> Empty {
        if self.has_empty() {
            match self.data.take() {
                ::std::option::Option::Some(Task_oneof_data::empty(v)) => v,
                _ => panic!(),
            }
        } else {
            Empty::new()
        }
    }

    pub fn get_empty(&self) -> &Empty {
        match self.data {
            ::std::option::Option::Some(Task_oneof_data::empty(ref v)) => v,
            _ => Empty::default_instance(),
        }
    }
}

impl ::protobuf::Message for Task {
    fn is_initialized(&self) -> bool {
        if let Some(Task_oneof_data::ping(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Task_oneof_data::empty(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.task_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Task_oneof_data::ping(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Task_oneof_data::empty(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &Task_oneof_data::ping(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Task_oneof_data::empty(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_uint32(1, self.task_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &Task_oneof_data::ping(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Task_oneof_data::empty(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Task {
        Task::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "task_id",
                    |m: &Task| { &m.task_id },
                    |m: &mut Task| { &mut m.task_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Ping>(
                    "ping",
                    Task::has_ping,
                    Task::get_ping,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Empty>(
                    "empty",
                    Task::has_empty,
                    Task::get_empty,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Task>(
                    "Task",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Task {
        static mut instance: ::protobuf::lazy::Lazy<Task> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Task,
        };
        unsafe {
            instance.get(Task::new)
        }
    }
}

impl ::protobuf::Clear for Task {
    fn clear(&mut self) {
        self.clear_task_id();
        self.clear_ping();
        self.clear_empty();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Task {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Task {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metadata {
    // message fields
    pub hostname: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    // string hostname = 1;

    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }

    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }

    // string version = 2;

    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    pub fn get_version(&self) -> &str {
        &self.version
    }
}

impl ::protobuf::Message for Metadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hostname);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.hostname.is_empty() {
            os.write_string(1, &self.hostname)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "hostname",
                    |m: &Metadata| { &m.hostname },
                    |m: &mut Metadata| { &mut m.hostname },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &Metadata| { &m.version },
                    |m: &mut Metadata| { &mut m.version },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Metadata>(
                    "Metadata",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Metadata {
        static mut instance: ::protobuf::lazy::Lazy<Metadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Metadata,
        };
        unsafe {
            instance.get(Metadata::new)
        }
    }
}

impl ::protobuf::Clear for Metadata {
    fn clear(&mut self) {
        self.clear_hostname();
        self.clear_version();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ping {
    // message fields
    pub source_address: ::protobuf::SingularPtrField<Address>,
    pub destination_addresses: ::protobuf::RepeatedField<Address>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Ping {
    pub fn new() -> Ping {
        ::std::default::Default::default()
    }

    // .Address source_address = 1;

    pub fn clear_source_address(&mut self) {
        self.source_address.clear();
    }

    pub fn has_source_address(&self) -> bool {
        self.source_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_address(&mut self, v: Address) {
        self.source_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_address(&mut self) -> &mut Address {
        if self.source_address.is_none() {
            self.source_address.set_default();
        }
        self.source_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_address(&mut self) -> Address {
        self.source_address.take().unwrap_or_else(|| Address::new())
    }

    pub fn get_source_address(&self) -> &Address {
        self.source_address.as_ref().unwrap_or_else(|| Address::default_instance())
    }

    // repeated .Address destination_addresses = 2;

    pub fn clear_destination_addresses(&mut self) {
        self.destination_addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination_addresses(&mut self, v: ::protobuf::RepeatedField<Address>) {
        self.destination_addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_destination_addresses(&mut self) -> &mut ::protobuf::RepeatedField<Address> {
        &mut self.destination_addresses
    }

    // Take field
    pub fn take_destination_addresses(&mut self) -> ::protobuf::RepeatedField<Address> {
        ::std::mem::replace(&mut self.destination_addresses, ::protobuf::RepeatedField::new())
    }

    pub fn get_destination_addresses(&self) -> &[Address] {
        &self.destination_addresses
    }
}

impl ::protobuf::Message for Ping {
    fn is_initialized(&self) -> bool {
        for v in &self.source_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.destination_addresses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.destination_addresses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.source_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.destination_addresses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.source_address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.destination_addresses {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ping {
        Ping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Address>>(
                    "source_address",
                    |m: &Ping| { &m.source_address },
                    |m: &mut Ping| { &mut m.source_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Address>>(
                    "destination_addresses",
                    |m: &Ping| { &m.destination_addresses },
                    |m: &mut Ping| { &mut m.destination_addresses },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ping>(
                    "Ping",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ping {
        static mut instance: ::protobuf::lazy::Lazy<Ping> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ping,
        };
        unsafe {
            instance.get(Ping::new)
        }
    }
}

impl ::protobuf::Clear for Ping {
    fn clear(&mut self) {
        self.clear_source_address();
        self.clear_destination_addresses();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ping {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Address {
    // message oneof groups
    pub value: ::std::option::Option<Address_oneof_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Address_oneof_value {
    v4(u32),
    v6(::std::vec::Vec<u8>),
}

impl Address {
    pub fn new() -> Address {
        ::std::default::Default::default()
    }

    // fixed32 v4 = 1;

    pub fn clear_v4(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_v4(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Address_oneof_value::v4(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v4(&mut self, v: u32) {
        self.value = ::std::option::Option::Some(Address_oneof_value::v4(v))
    }

    pub fn get_v4(&self) -> u32 {
        match self.value {
            ::std::option::Option::Some(Address_oneof_value::v4(v)) => v,
            _ => 0,
        }
    }

    // bytes v6 = 2;

    pub fn clear_v6(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_v6(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Address_oneof_value::v6(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v6(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(Address_oneof_value::v6(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v6(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Address_oneof_value::v6(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Address_oneof_value::v6(::std::vec::Vec::new()));
        }
        match self.value {
            ::std::option::Option::Some(Address_oneof_value::v6(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v6(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_v6() {
            match self.value.take() {
                ::std::option::Option::Some(Address_oneof_value::v6(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_v6(&self) -> &[u8] {
        match self.value {
            ::std::option::Option::Some(Address_oneof_value::v6(ref v)) => v,
            _ => &[],
        }
    }
}

impl ::protobuf::Message for Address {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Address_oneof_value::v4(is.read_fixed32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Address_oneof_value::v6(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Address_oneof_value::v4(v) => {
                    my_size += 5;
                },
                &Address_oneof_value::v6(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Address_oneof_value::v4(v) => {
                    os.write_fixed32(1, v)?;
                },
                &Address_oneof_value::v6(ref v) => {
                    os.write_bytes(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Address {
        Address::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                    "v4",
                    Address::has_v4,
                    Address::get_v4,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "v6",
                    Address::has_v6,
                    Address::get_v6,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Address>(
                    "Address",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Address {
        static mut instance: ::protobuf::lazy::Lazy<Address> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Address,
        };
        unsafe {
            instance.get(Address::new)
        }
    }
}

impl ::protobuf::Clear for Address {
    fn clear(&mut self) {
        self.clear_v4();
        self.clear_v6();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Address {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Address {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaskResult {
    // message fields
    pub task_id: u32,
    pub client: ::protobuf::SingularPtrField<Client>,
    pub result_list: ::protobuf::RepeatedField<Result>,
    pub is_finished: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TaskResult {
    pub fn new() -> TaskResult {
        ::std::default::Default::default()
    }

    // uint32 task_id = 1;

    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    pub fn get_task_id(&self) -> u32 {
        self.task_id
    }

    // .Client client = 2;

    pub fn clear_client(&mut self) {
        self.client.clear();
    }

    pub fn has_client(&self) -> bool {
        self.client.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client(&mut self, v: Client) {
        self.client = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client(&mut self) -> &mut Client {
        if self.client.is_none() {
            self.client.set_default();
        }
        self.client.as_mut().unwrap()
    }

    // Take field
    pub fn take_client(&mut self) -> Client {
        self.client.take().unwrap_or_else(|| Client::new())
    }

    pub fn get_client(&self) -> &Client {
        self.client.as_ref().unwrap_or_else(|| Client::default_instance())
    }

    // repeated .Result result_list = 3;

    pub fn clear_result_list(&mut self) {
        self.result_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_list(&mut self, v: ::protobuf::RepeatedField<Result>) {
        self.result_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result_list(&mut self) -> &mut ::protobuf::RepeatedField<Result> {
        &mut self.result_list
    }

    // Take field
    pub fn take_result_list(&mut self) -> ::protobuf::RepeatedField<Result> {
        ::std::mem::replace(&mut self.result_list, ::protobuf::RepeatedField::new())
    }

    pub fn get_result_list(&self) -> &[Result] {
        &self.result_list
    }

    // bool is_finished = 4;

    pub fn clear_is_finished(&mut self) {
        self.is_finished = false;
    }

    // Param is passed by value, moved
    pub fn set_is_finished(&mut self, v: bool) {
        self.is_finished = v;
    }

    pub fn get_is_finished(&self) -> bool {
        self.is_finished
    }
}

impl ::protobuf::Message for TaskResult {
    fn is_initialized(&self) -> bool {
        for v in &self.client {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.result_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.task_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result_list)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_finished = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.client.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.result_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.is_finished != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_uint32(1, self.task_id)?;
        }
        if let Some(ref v) = self.client.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.result_list {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.is_finished != false {
            os.write_bool(4, self.is_finished)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaskResult {
        TaskResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "task_id",
                    |m: &TaskResult| { &m.task_id },
                    |m: &mut TaskResult| { &mut m.task_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Client>>(
                    "client",
                    |m: &TaskResult| { &m.client },
                    |m: &mut TaskResult| { &mut m.client },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Result>>(
                    "result_list",
                    |m: &TaskResult| { &m.result_list },
                    |m: &mut TaskResult| { &mut m.result_list },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_finished",
                    |m: &TaskResult| { &m.is_finished },
                    |m: &mut TaskResult| { &mut m.is_finished },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaskResult>(
                    "TaskResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaskResult {
        static mut instance: ::protobuf::lazy::Lazy<TaskResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaskResult,
        };
        unsafe {
            instance.get(TaskResult::new)
        }
    }
}

impl ::protobuf::Clear for TaskResult {
    fn clear(&mut self) {
        self.clear_task_id();
        self.clear_client();
        self.clear_result_list();
        self.clear_is_finished();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaskResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Result {
    // message oneof groups
    pub value: ::std::option::Option<Result_oneof_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Result_oneof_value {
    ping(PingResult),
}

impl Result {
    pub fn new() -> Result {
        ::std::default::Default::default()
    }

    // .PingResult ping = 1;

    pub fn clear_ping(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_ping(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Result_oneof_value::ping(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ping(&mut self, v: PingResult) {
        self.value = ::std::option::Option::Some(Result_oneof_value::ping(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ping(&mut self) -> &mut PingResult {
        if let ::std::option::Option::Some(Result_oneof_value::ping(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Result_oneof_value::ping(PingResult::new()));
        }
        match self.value {
            ::std::option::Option::Some(Result_oneof_value::ping(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ping(&mut self) -> PingResult {
        if self.has_ping() {
            match self.value.take() {
                ::std::option::Option::Some(Result_oneof_value::ping(v)) => v,
                _ => panic!(),
            }
        } else {
            PingResult::new()
        }
    }

    pub fn get_ping(&self) -> &PingResult {
        match self.value {
            ::std::option::Option::Some(Result_oneof_value::ping(ref v)) => v,
            _ => PingResult::default_instance(),
        }
    }
}

impl ::protobuf::Message for Result {
    fn is_initialized(&self) -> bool {
        if let Some(Result_oneof_value::ping(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Result_oneof_value::ping(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Result_oneof_value::ping(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Result_oneof_value::ping(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Result {
        Result::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PingResult>(
                    "ping",
                    Result::has_ping,
                    Result::get_ping,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Result>(
                    "Result",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Result {
        static mut instance: ::protobuf::lazy::Lazy<Result> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Result,
        };
        unsafe {
            instance.get(Result::new)
        }
    }
}

impl ::protobuf::Clear for Result {
    fn clear(&mut self) {
        self.clear_ping();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Result {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingResult {
    // message fields
    pub source_address: ::protobuf::SingularPtrField<Address>,
    pub destination_address: ::protobuf::SingularPtrField<Address>,
    pub receive_time: u64,
    pub payload: ::protobuf::SingularPtrField<PingPayload>,
    pub ttl: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PingResult {
    pub fn new() -> PingResult {
        ::std::default::Default::default()
    }

    // .Address source_address = 1;

    pub fn clear_source_address(&mut self) {
        self.source_address.clear();
    }

    pub fn has_source_address(&self) -> bool {
        self.source_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_address(&mut self, v: Address) {
        self.source_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_address(&mut self) -> &mut Address {
        if self.source_address.is_none() {
            self.source_address.set_default();
        }
        self.source_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_address(&mut self) -> Address {
        self.source_address.take().unwrap_or_else(|| Address::new())
    }

    pub fn get_source_address(&self) -> &Address {
        self.source_address.as_ref().unwrap_or_else(|| Address::default_instance())
    }

    // .Address destination_address = 2;

    pub fn clear_destination_address(&mut self) {
        self.destination_address.clear();
    }

    pub fn has_destination_address(&self) -> bool {
        self.destination_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_address(&mut self, v: Address) {
        self.destination_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_address(&mut self) -> &mut Address {
        if self.destination_address.is_none() {
            self.destination_address.set_default();
        }
        self.destination_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_address(&mut self) -> Address {
        self.destination_address.take().unwrap_or_else(|| Address::new())
    }

    pub fn get_destination_address(&self) -> &Address {
        self.destination_address.as_ref().unwrap_or_else(|| Address::default_instance())
    }

    // uint64 receive_time = 3;

    pub fn clear_receive_time(&mut self) {
        self.receive_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_receive_time(&mut self, v: u64) {
        self.receive_time = v;
    }

    pub fn get_receive_time(&self) -> u64 {
        self.receive_time
    }

    // .PingPayload payload = 4;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: PingPayload) {
        self.payload = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut PingPayload {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> PingPayload {
        self.payload.take().unwrap_or_else(|| PingPayload::new())
    }

    pub fn get_payload(&self) -> &PingPayload {
        self.payload.as_ref().unwrap_or_else(|| PingPayload::default_instance())
    }

    // uint32 ttl = 5;

    pub fn clear_ttl(&mut self) {
        self.ttl = 0;
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: u32) {
        self.ttl = v;
    }

    pub fn get_ttl(&self) -> u32 {
        self.ttl
    }
}

impl ::protobuf::Message for PingResult {
    fn is_initialized(&self) -> bool {
        for v in &self.source_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.destination_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.payload {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.destination_address)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.receive_time = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.payload)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ttl = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.source_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.destination_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.receive_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.receive_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.ttl != 0 {
            my_size += ::protobuf::rt::value_size(5, self.ttl, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.source_address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.destination_address.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.receive_time != 0 {
            os.write_uint64(3, self.receive_time)?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.ttl != 0 {
            os.write_uint32(5, self.ttl)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingResult {
        PingResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Address>>(
                    "source_address",
                    |m: &PingResult| { &m.source_address },
                    |m: &mut PingResult| { &mut m.source_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Address>>(
                    "destination_address",
                    |m: &PingResult| { &m.destination_address },
                    |m: &mut PingResult| { &mut m.destination_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "receive_time",
                    |m: &PingResult| { &m.receive_time },
                    |m: &mut PingResult| { &mut m.receive_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PingPayload>>(
                    "payload",
                    |m: &PingResult| { &m.payload },
                    |m: &mut PingResult| { &mut m.payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "ttl",
                    |m: &PingResult| { &m.ttl },
                    |m: &mut PingResult| { &mut m.ttl },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PingResult>(
                    "PingResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PingResult {
        static mut instance: ::protobuf::lazy::Lazy<PingResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PingResult,
        };
        unsafe {
            instance.get(PingResult::new)
        }
    }
}

impl ::protobuf::Clear for PingResult {
    fn clear(&mut self) {
        self.clear_source_address();
        self.clear_destination_address();
        self.clear_receive_time();
        self.clear_payload();
        self.clear_ttl();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingPayload {
    // message fields
    pub task_id: u32,
    pub transmit_time: u64,
    pub source_address: ::protobuf::SingularPtrField<Address>,
    pub destination_address: ::protobuf::SingularPtrField<Address>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PingPayload {
    pub fn new() -> PingPayload {
        ::std::default::Default::default()
    }

    // fixed32 task_id = 1;

    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    pub fn get_task_id(&self) -> u32 {
        self.task_id
    }

    // fixed64 transmit_time = 2;

    pub fn clear_transmit_time(&mut self) {
        self.transmit_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_transmit_time(&mut self, v: u64) {
        self.transmit_time = v;
    }

    pub fn get_transmit_time(&self) -> u64 {
        self.transmit_time
    }

    // .Address source_address = 3;

    pub fn clear_source_address(&mut self) {
        self.source_address.clear();
    }

    pub fn has_source_address(&self) -> bool {
        self.source_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_address(&mut self, v: Address) {
        self.source_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_address(&mut self) -> &mut Address {
        if self.source_address.is_none() {
            self.source_address.set_default();
        }
        self.source_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_address(&mut self) -> Address {
        self.source_address.take().unwrap_or_else(|| Address::new())
    }

    pub fn get_source_address(&self) -> &Address {
        self.source_address.as_ref().unwrap_or_else(|| Address::default_instance())
    }

    // .Address destination_address = 4;

    pub fn clear_destination_address(&mut self) {
        self.destination_address.clear();
    }

    pub fn has_destination_address(&self) -> bool {
        self.destination_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_address(&mut self, v: Address) {
        self.destination_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_address(&mut self) -> &mut Address {
        if self.destination_address.is_none() {
            self.destination_address.set_default();
        }
        self.destination_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_address(&mut self) -> Address {
        self.destination_address.take().unwrap_or_else(|| Address::new())
    }

    pub fn get_destination_address(&self) -> &Address {
        self.destination_address.as_ref().unwrap_or_else(|| Address::default_instance())
    }
}

impl ::protobuf::Message for PingPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.source_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.destination_address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.task_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.transmit_time = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.destination_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += 5;
        }
        if self.transmit_time != 0 {
            my_size += 9;
        }
        if let Some(ref v) = self.source_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.destination_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_fixed32(1, self.task_id)?;
        }
        if self.transmit_time != 0 {
            os.write_fixed64(2, self.transmit_time)?;
        }
        if let Some(ref v) = self.source_address.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.destination_address.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingPayload {
        PingPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                    "task_id",
                    |m: &PingPayload| { &m.task_id },
                    |m: &mut PingPayload| { &mut m.task_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "transmit_time",
                    |m: &PingPayload| { &m.transmit_time },
                    |m: &mut PingPayload| { &mut m.transmit_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Address>>(
                    "source_address",
                    |m: &PingPayload| { &m.source_address },
                    |m: &mut PingPayload| { &mut m.source_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Address>>(
                    "destination_address",
                    |m: &PingPayload| { &m.destination_address },
                    |m: &mut PingPayload| { &mut m.destination_address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PingPayload>(
                    "PingPayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PingPayload {
        static mut instance: ::protobuf::lazy::Lazy<PingPayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PingPayload,
        };
        unsafe {
            instance.get(PingPayload::new)
        }
    }
}

impl ::protobuf::Clear for PingPayload {
    fn clear(&mut self) {
        self.clear_task_id();
        self.clear_transmit_time();
        self.clear_source_address();
        self.clear_destination_address();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18schema/verfploeter.proto\"\x07\n\x05Empty\"]\n\x03Ack\x12\x17\n\
    \x07task_id\x18\x01\x20\x01(\rR\x06taskId\x12\x18\n\x07success\x18\x02\
    \x20\x01(\x08R\x07success\x12#\n\rerror_message\x18\x03\x20\x01(\tR\x0ce\
    rrorMessage\"!\n\x06TaskId\x12\x17\n\x07task_id\x18\x01\x20\x01(\rR\x06t\
    askId\"T\n\x0cScheduleTask\x12\x1f\n\x06client\x18\x01\x20\x01(\x0b2\x07\
    .ClientR\x06client\x12\x1b\n\x04ping\x18\x02\x20\x01(\x0b2\x05.PingH\0R\
    \x04pingB\x06\n\x04data\"/\n\nClientList\x12!\n\x07clients\x18\x01\x20\
    \x03(\x0b2\x07.ClientR\x07clients\"E\n\x06Client\x12\x14\n\x05index\x18\
    \x01\x20\x01(\rR\x05index\x12%\n\x08metadata\x18\x02\x20\x01(\x0b2\t.Met\
    adataR\x08metadata\"d\n\x04Task\x12\x17\n\x07task_id\x18\x01\x20\x01(\rR\
    \x06taskId\x12\x1b\n\x04ping\x18\x02\x20\x01(\x0b2\x05.PingH\0R\x04ping\
    \x12\x1e\n\x05empty\x18\x03\x20\x01(\x0b2\x06.EmptyH\0R\x05emptyB\x06\n\
    \x04data\"@\n\x08Metadata\x12\x1a\n\x08hostname\x18\x01\x20\x01(\tR\x08h\
    ostname\x12\x18\n\x07version\x18\x02\x20\x01(\tR\x07version\"v\n\x04Ping\
    \x12/\n\x0esource_address\x18\x01\x20\x01(\x0b2\x08.AddressR\rsourceAddr\
    ess\x12=\n\x15destination_addresses\x18\x02\x20\x03(\x0b2\x08.AddressR\
    \x14destinationAddresses\"6\n\x07Address\x12\x10\n\x02v4\x18\x01\x20\x01\
    (\x07H\0R\x02v4\x12\x10\n\x02v6\x18\x02\x20\x01(\x0cH\0R\x02v6B\x07\n\
    \x05value\"\x91\x01\n\nTaskResult\x12\x17\n\x07task_id\x18\x01\x20\x01(\
    \rR\x06taskId\x12\x1f\n\x06client\x18\x02\x20\x01(\x0b2\x07.ClientR\x06c\
    lient\x12(\n\x0bresult_list\x18\x03\x20\x03(\x0b2\x07.ResultR\nresultLis\
    t\x12\x1f\n\x0bis_finished\x18\x04\x20\x01(\x08R\nisFinished\"4\n\x06Res\
    ult\x12!\n\x04ping\x18\x01\x20\x01(\x0b2\x0b.PingResultH\0R\x04pingB\x07\
    \n\x05value\"\xd5\x01\n\nPingResult\x12/\n\x0esource_address\x18\x01\x20\
    \x01(\x0b2\x08.AddressR\rsourceAddress\x129\n\x13destination_address\x18\
    \x02\x20\x01(\x0b2\x08.AddressR\x12destinationAddress\x12!\n\x0creceive_\
    time\x18\x03\x20\x01(\x04R\x0breceiveTime\x12&\n\x07payload\x18\x04\x20\
    \x01(\x0b2\x0c.PingPayloadR\x07payload\x12\x10\n\x03ttl\x18\x05\x20\x01(\
    \rR\x03ttl\"\xb7\x01\n\x0bPingPayload\x12\x17\n\x07task_id\x18\x01\x20\
    \x01(\x07R\x06taskId\x12#\n\rtransmit_time\x18\x02\x20\x01(\x06R\x0ctran\
    smitTime\x12/\n\x0esource_address\x18\x03\x20\x01(\x0b2\x08.AddressR\rso\
    urceAddress\x129\n\x13destination_address\x18\x04\x20\x01(\x0b2\x08.Addr\
    essR\x12destinationAddress2\xeb\x01\n\x0bVerfploeter\x12\x1f\n\x07connec\
    t\x12\t.Metadata\x1a\x05.Task\"\00\x01\x12\x20\n\x07do_task\x12\r.Schedu\
    leTask\x1a\x04.Ack\"\0\x12%\n\x0clist_clients\x12\x06.Empty\x1a\x0b.Clie\
    ntList\"\0\x12\"\n\x0bsend_result\x12\x0b.TaskResult\x1a\x04.Ack\"\0\x12\
    ,\n\x10subscribe_result\x12\x07.TaskId\x1a\x0b.TaskResult\"\00\x01\x12\
    \x20\n\rtask_finished\x12\x07.TaskId\x1a\x04.Ack\"\0J\xb0\x17\n\x06\x12\
    \x04\0\0Y\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x06\0\x12\x04\
    \x02\0\t\x01\n\n\n\x03\x06\0\x01\x12\x03\x02\x08\x13\n\x0b\n\x04\x06\0\
    \x02\0\x12\x03\x03\x042\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x03\x08\x0f\
    \n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x03\x10\x18\n\x0c\n\x05\x06\0\x02\0\
    \x06\x12\x03\x03#)\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x03*.\n\x0b\n\x04\
    \x06\0\x02\x01\x12\x03\x04\x04.\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\
    \x04\x08\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x04\x10\x1c\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x04'*\n\x0b\n\x04\x06\0\x02\x02\x12\x03\
    \x05\x043\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x05\x08\x14\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03\x05\x15\x1a\n\x0c\n\x05\x06\0\x02\x02\x03\x12\
    \x03\x05%/\n\x0b\n\x04\x06\0\x02\x03\x12\x03\x06\x040\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x03\x06\x08\x13\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\
    \x06\x14\x1e\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x06),\n\x0b\n\x04\x06\
    \0\x02\x04\x12\x03\x07\x04?\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x07\
    \x08\x18\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x07\x19\x1f\n\x0c\n\x05\
    \x06\0\x02\x04\x06\x12\x03\x07*0\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\
    \x071;\n\x0b\n\x04\x06\0\x02\x05\x12\x03\x08\x04.\n\x0c\n\x05\x06\0\x02\
    \x05\x01\x12\x03\x08\x08\x15\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\x08\
    \x16\x1c\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03\x08'*\n\t\n\x02\x04\0\x12\
    \x03\x0b\0\x10\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\r\n\n\n\x02\x04\x01\
    \x12\x04\r\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x0b\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x0e\x04\x17\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\
    \x0e\x04\r\r\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x0e\x0b\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x0e\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0f\x04\x15\n\r\n\
    \x05\x04\x01\x02\x01\x04\x12\x04\x0f\x04\x0e\x17\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x0f\x04\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0f\
    \t\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0f\x13\x14\n\x0b\n\x04\
    \x04\x01\x02\x02\x12\x03\x10\x04\x1d\n\r\n\x05\x04\x01\x02\x02\x04\x12\
    \x04\x10\x04\x0f\x15\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x10\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x10\x0b\x18\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03\x10\x1b\x1c\n\t\n\x02\x04\x02\x12\x03\x13\0&\n\n\n\
    \x03\x04\x02\x01\x12\x03\x13\x08\x0e\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x13\x11$\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x13\x11\x10\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03\x13\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03\x13\x18\x1f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\"#\n\n\n\x02\
    \x04\x03\x12\x04\x15\0\x1a\x01\n\n\n\x03\x04\x03\x01\x12\x03\x15\x08\x14\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x03\x16\x04\x16\n\r\n\x05\x04\x03\x02\0\
    \x04\x12\x04\x16\x04\x15\x16\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x16\
    \x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x16\x0b\x11\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03\x16\x14\x15\n\x0c\n\x04\x04\x03\x08\0\x12\x04\x17\
    \x04\x19\x05\n\x0c\n\x05\x04\x03\x08\0\x01\x12\x03\x17\n\x0e\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x03\x18\x08\x16\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\
    \x03\x18\x08\x0c\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x18\r\x11\n\x0c\
    \n\x05\x04\x03\x02\x01\x03\x12\x03\x18\x14\x15\n\n\n\x02\x04\x04\x12\x04\
    \x1c\0\x1e\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1c\x08\x12\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x03\x1d\x04\x20\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03\x1d\
    \x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x1d\r\x13\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03\x1d\x14\x1b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\
    \x1d\x1e\x1f\n\n\n\x02\x04\x05\x12\x04\x20\0#\x01\n\n\n\x03\x04\x05\x01\
    \x12\x03\x20\x08\x0e\n\x0b\n\x04\x04\x05\x02\0\x12\x03!\x04\x15\n\r\n\
    \x05\x04\x05\x02\0\x04\x12\x04!\x04\x20\x10\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x03!\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03!\x0b\x10\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x03!\x13\x14\n\x0b\n\x04\x04\x05\x02\x01\
    \x12\x03\"\x04\x1a\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04\"\x04!\x15\n\
    \x0c\n\x05\x04\x05\x02\x01\x06\x12\x03\"\x04\x0c\n\x0c\n\x05\x04\x05\x02\
    \x01\x01\x12\x03\"\r\x15\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03\"\x18\
    \x19\n\n\n\x02\x04\x06\x12\x04%\0+\x01\n\n\n\x03\x04\x06\x01\x12\x03%\
    \x08\x0c\n\x0b\n\x04\x04\x06\x02\0\x12\x03&\x04\x17\n\r\n\x05\x04\x06\
    \x02\0\x04\x12\x04&\x04%\x0e\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03&\x04\
    \n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03&\x0b\x12\n\x0c\n\x05\x04\x06\
    \x02\0\x03\x12\x03&\x15\x16\n\x0c\n\x04\x04\x06\x08\0\x12\x04'\x04*\x05\
    \n\x0c\n\x05\x04\x06\x08\0\x01\x12\x03'\n\x0e\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03(\x08\x16\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03(\x08\x0c\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x03(\r\x11\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03(\x14\x15\n\x0b\n\x04\x04\x06\x02\x02\x12\x03)\x08\x18\n\
    \x0c\n\x05\x04\x06\x02\x02\x06\x12\x03)\x08\r\n\x0c\n\x05\x04\x06\x02\
    \x02\x01\x12\x03)\x0e\x13\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03)\x16\
    \x17\n\n\n\x02\x04\x07\x12\x04-\00\x01\n\n\n\x03\x04\x07\x01\x12\x03-\
    \x08\x10\n\x0b\n\x04\x04\x07\x02\0\x12\x03.\x04\x18\n\r\n\x05\x04\x07\
    \x02\0\x04\x12\x04.\x04-\x12\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03.\x04\
    \n\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03.\x0b\x13\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03.\x16\x17\n\x0b\n\x04\x04\x07\x02\x01\x12\x03/\x04\x17\
    \n\r\n\x05\x04\x07\x02\x01\x04\x12\x04/\x04.\x18\n\x0c\n\x05\x04\x07\x02\
    \x01\x05\x12\x03/\x04\n\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03/\x0b\x12\
    \n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03/\x15\x16\n\n\n\x02\x04\x08\x12\
    \x042\05\x01\n\n\n\x03\x04\x08\x01\x12\x032\x08\x0c\n\x0b\n\x04\x04\x08\
    \x02\0\x12\x033\x04\x1f\n\r\n\x05\x04\x08\x02\0\x04\x12\x043\x042\x0e\n\
    \x0c\n\x05\x04\x08\x02\0\x06\x12\x033\x04\x0b\n\x0c\n\x05\x04\x08\x02\0\
    \x01\x12\x033\x0c\x1a\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x033\x1d\x1e\n\
    \x0b\n\x04\x04\x08\x02\x01\x12\x034\x04/\n\x0c\n\x05\x04\x08\x02\x01\x04\
    \x12\x034\x04\x0c\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x034\r\x14\n\x0c\n\
    \x05\x04\x08\x02\x01\x01\x12\x034\x15*\n\x0c\n\x05\x04\x08\x02\x01\x03\
    \x12\x034-.\n\n\n\x02\x04\t\x12\x048\0=\x01\n\n\n\x03\x04\t\x01\x12\x038\
    \x08\x0f\n\x0c\n\x04\x04\t\x08\0\x12\x049\x04<\x05\n\x0c\n\x05\x04\t\x08\
    \0\x01\x12\x039\n\x0f\n\x0b\n\x04\x04\t\x02\0\x12\x03:\x08\x17\n\x0c\n\
    \x05\x04\t\x02\0\x05\x12\x03:\x08\x0f\n\x0c\n\x05\x04\t\x02\0\x01\x12\
    \x03:\x10\x12\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03:\x15\x16\n\x0b\n\x04\
    \x04\t\x02\x01\x12\x03;\x08\x15\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03;\
    \x08\r\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03;\x0e\x10\n\x0c\n\x05\x04\t\
    \x02\x01\x03\x12\x03;\x13\x14\n\n\n\x02\x04\n\x12\x04?\0D\x01\n\n\n\x03\
    \x04\n\x01\x12\x03?\x08\x12\n\x0b\n\x04\x04\n\x02\0\x12\x03@\x04\x17\n\r\
    \n\x05\x04\n\x02\0\x04\x12\x04@\x04?\x14\n\x0c\n\x05\x04\n\x02\0\x05\x12\
    \x03@\x04\n\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03@\x0b\x12\n\x0c\n\x05\x04\
    \n\x02\0\x03\x12\x03@\x15\x16\n\x0b\n\x04\x04\n\x02\x01\x12\x03A\x04\x16\
    \n\r\n\x05\x04\n\x02\x01\x04\x12\x04A\x04@\x17\n\x0c\n\x05\x04\n\x02\x01\
    \x06\x12\x03A\x04\n\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03A\x0b\x11\n\x0c\
    \n\x05\x04\n\x02\x01\x03\x12\x03A\x14\x15\n\x0b\n\x04\x04\n\x02\x02\x12\
    \x03B\x04$\n\x0c\n\x05\x04\n\x02\x02\x04\x12\x03B\x04\x0c\n\x0c\n\x05\
    \x04\n\x02\x02\x06\x12\x03B\r\x13\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03B\
    \x14\x1f\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03B\"#\n\x0b\n\x04\x04\n\x02\
    \x03\x12\x03C\x04\x19\n\r\n\x05\x04\n\x02\x03\x04\x12\x04C\x04B$\n\x0c\n\
    \x05\x04\n\x02\x03\x05\x12\x03C\x04\x08\n\x0c\n\x05\x04\n\x02\x03\x01\
    \x12\x03C\t\x14\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03C\x17\x18\n\n\n\x02\
    \x04\x0b\x12\x04F\0J\x01\n\n\n\x03\x04\x0b\x01\x12\x03F\x08\x0e\n\x0c\n\
    \x04\x04\x0b\x08\0\x12\x04G\x04I\x05\n\x0c\n\x05\x04\x0b\x08\0\x01\x12\
    \x03G\n\x0f\n\x0b\n\x04\x04\x0b\x02\0\x12\x03H\x08\x1c\n\x0c\n\x05\x04\
    \x0b\x02\0\x06\x12\x03H\x08\x12\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03H\
    \x13\x17\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03H\x1a\x1b\n\n\n\x02\x04\
    \x0c\x12\x04L\0R\x01\n\n\n\x03\x04\x0c\x01\x12\x03L\x08\x12\n\x0b\n\x04\
    \x04\x0c\x02\0\x12\x03M\x04\x1f\n\r\n\x05\x04\x0c\x02\0\x04\x12\x04M\x04\
    L\x14\n\x0c\n\x05\x04\x0c\x02\0\x06\x12\x03M\x04\x0b\n\x0c\n\x05\x04\x0c\
    \x02\0\x01\x12\x03M\x0c\x1a\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03M\x1d\
    \x1e\n\x0b\n\x04\x04\x0c\x02\x01\x12\x03N\x04$\n\r\n\x05\x04\x0c\x02\x01\
    \x04\x12\x04N\x04M\x1f\n\x0c\n\x05\x04\x0c\x02\x01\x06\x12\x03N\x04\x0b\
    \n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03N\x0c\x1f\n\x0c\n\x05\x04\x0c\
    \x02\x01\x03\x12\x03N\"#\n\x0b\n\x04\x04\x0c\x02\x02\x12\x03O\x04\x1c\n\
    \r\n\x05\x04\x0c\x02\x02\x04\x12\x04O\x04N$\n\x0c\n\x05\x04\x0c\x02\x02\
    \x05\x12\x03O\x04\n\n\x0c\n\x05\x04\x0c\x02\x02\x01\x12\x03O\x0b\x17\n\
    \x0c\n\x05\x04\x0c\x02\x02\x03\x12\x03O\x1a\x1b\n\x0b\n\x04\x04\x0c\x02\
    \x03\x12\x03P\x04\x1c\n\r\n\x05\x04\x0c\x02\x03\x04\x12\x04P\x04O\x1c\n\
    \x0c\n\x05\x04\x0c\x02\x03\x06\x12\x03P\x04\x0f\n\x0c\n\x05\x04\x0c\x02\
    \x03\x01\x12\x03P\x10\x17\n\x0c\n\x05\x04\x0c\x02\x03\x03\x12\x03P\x1a\
    \x1b\n\x0b\n\x04\x04\x0c\x02\x04\x12\x03Q\x04\x13\n\r\n\x05\x04\x0c\x02\
    \x04\x04\x12\x04Q\x04P\x1c\n\x0c\n\x05\x04\x0c\x02\x04\x05\x12\x03Q\x04\
    \n\n\x0c\n\x05\x04\x0c\x02\x04\x01\x12\x03Q\x0b\x0e\n\x0c\n\x05\x04\x0c\
    \x02\x04\x03\x12\x03Q\x11\x12\n\n\n\x02\x04\r\x12\x04T\0Y\x01\n\n\n\x03\
    \x04\r\x01\x12\x03T\x08\x13\n\x0b\n\x04\x04\r\x02\0\x12\x03U\x04\x18\n\r\
    \n\x05\x04\r\x02\0\x04\x12\x04U\x04T\x15\n\x0c\n\x05\x04\r\x02\0\x05\x12\
    \x03U\x04\x0b\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03U\x0c\x13\n\x0c\n\x05\
    \x04\r\x02\0\x03\x12\x03U\x16\x17\n\x0b\n\x04\x04\r\x02\x01\x12\x03V\x04\
    \x1e\n\r\n\x05\x04\r\x02\x01\x04\x12\x04V\x04U\x18\n\x0c\n\x05\x04\r\x02\
    \x01\x05\x12\x03V\x04\x0b\n\x0c\n\x05\x04\r\x02\x01\x01\x12\x03V\x0c\x19\
    \n\x0c\n\x05\x04\r\x02\x01\x03\x12\x03V\x1c\x1d\n\x0b\n\x04\x04\r\x02\
    \x02\x12\x03W\x04\x1f\n\r\n\x05\x04\r\x02\x02\x04\x12\x04W\x04V\x1e\n\
    \x0c\n\x05\x04\r\x02\x02\x06\x12\x03W\x04\x0b\n\x0c\n\x05\x04\r\x02\x02\
    \x01\x12\x03W\x0c\x1a\n\x0c\n\x05\x04\r\x02\x02\x03\x12\x03W\x1d\x1e\n\
    \x0b\n\x04\x04\r\x02\x03\x12\x03X\x04$\n\r\n\x05\x04\r\x02\x03\x04\x12\
    \x04X\x04W\x1f\n\x0c\n\x05\x04\r\x02\x03\x06\x12\x03X\x04\x0b\n\x0c\n\
    \x05\x04\r\x02\x03\x01\x12\x03X\x0c\x1f\n\x0c\n\x05\x04\r\x02\x03\x03\
    \x12\x03X\"#b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
