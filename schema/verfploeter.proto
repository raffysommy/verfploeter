syntax = "proto3";

service Verfploeter {
    rpc connect(Metadata) returns (stream Task) {}
    rpc do_task(ScheduleTask) returns (Ack) {}
    rpc list_clients(Empty) returns (ClientList) {}
    rpc send_result(TaskResult) returns (Ack) {}
    rpc subscribe_result(TaskId) returns (stream TaskResult) {}
    rpc task_finished(TaskId) returns (Ack) {}
}

message Empty {}

message Ack {
    uint32 task_id = 1;
    bool success = 2;
    string error_message = 3;
}

message TaskId { uint32 task_id = 1; }

message ScheduleTask {
    Client client = 1;
    oneof data {
        Ping ping = 2;
    }
}

message ClientList {
    repeated Client clients = 1;
}

message Client {
    uint32 index = 1;
    Metadata metadata = 2;
}

message Task {
    uint32 task_id = 1;
    oneof data {
        Ping ping = 2;
        Empty empty = 3;
    }
}

message Metadata {
    string hostname = 1;
    string version = 2;
}

message Ping {
    Address source_address = 1;
    repeated Address destination_addresses = 2;
}


message Address {
    oneof value {
        fixed32 v4 = 1;
        bytes v6 = 2;
    }
}

message TaskResult {
    uint32 task_id = 1;
    Client client = 2;
    repeated Result result_list = 3;
    bool is_finished = 4;
}

message Result {
    oneof value {
        PingResult ping = 1;
    }
}

message PingResult {
    Address source_address = 1;
    Address destination_address = 2;
    uint64 receive_time = 3;
    PingPayload payload = 4;
    uint32 ttl = 5;
}

message PingPayload {
    fixed32 task_id = 1;
    fixed64 transmit_time = 2;
    Address source_address = 3;
    Address destination_address = 4;
}
